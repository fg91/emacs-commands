* General
** Useful keys
   - `M-q` converts long line to paragraph
   - One word for or back `M-f/b`
   
** Hotkeys to open files

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\e\ei")
                  (lambda () (interactive) (find-file "~/Dropbox/orgfiles/i.org")))

  (global-set-key (kbd "\e\el")
                  (lambda () (interactive) (find-file "~/Dropbox/orgfiles/links.org")))

  (global-set-key (kbd "\e\es")
                  (lambda () (interactive) (find-file "~/ml/emacs-commands/my_init.org")))

  (global-set-key (kbd "\e\ed")
                  (lambda () (interactive) (find-file "~/ownCloud/promotion/dissertation/dissertation_fabio_graetz.tex")))

#+END_SRC
* Adjusting the interface
** General adjustments

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (fset 'yes-or-no-p 'y-or-n-p)
     (global-set-key (kbd "<f5>") 'revert-buffer)
     (global-hl-line-mode t)
   #+END_SRC

** Appearance
   - `customize-themes`

   #+BEGIN_SRC emacs-lisp
     (load-theme 'deeper-blue t)
     ;; (use-package color-theme
     ;;   :ensure t)
   #+END_SRC

* Package management
  - `M-x package-refresh-contents` to reload packages
  - Instead of re-opening emacs after editing `.emacs` do `C-x C-e` or try `revert-buffer`
  - `:init` sets things before it loads the package, `:config` after
** try
   - `M-x try` and package name let's you try packages without installing them

   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC 
  
* Getting help
  - Get help with function `C-h f`
  - Describe key: `C-h k`
  - Describe variable `C-h v`
  - `describe-package`
  - `view-lossage` shows the history of commands

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC  

* Auto-completion
** IDO
   
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC

** auto-complete

   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
         (ac-config-default)
         (global-auto-complete-mode t)
         ))
   #+END_SRC

* Buffer management
  - Open a new file with `C-x C-f` creates a new buffer
  - Goto buffer `C-x b`. Creates new one if new name given. Type `?` for more info
  - Kill buffer `C-x k`
  - List all buffers `C-x C-b`

  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC
   
* Window management
  - `C-x 3` splits vertically
  - `C-x 1` to kill all other windows
  - `C-x 0` to kill the current window and go to the other

** winner-mode
   - Remembers window configuration
   - `C-c left/right` to go back and forth in window configuration
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC

** windmove
   - Allows you to navigate between windows using Shift + arrow keys
   
   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings)
     ;; Make windmove work in Org mode:
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC

** ace-window
   - Shows a number on each window on `C-x o`

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn  ;; if you have more than 1 instruction for init, enclose it in progn, actually not necessary any more, just 1 left
         (global-set-key [remap other-window] 'ace-window)
         ))
   #+END_SRC

* Searching
** swiper
   - Better search function
   - Supports regex
   - To use normal search function `isearch-forward`
   - use `counsel-ag` for silversearcher (`C-c C-p` to open search list in buffer)
     

     #+BEGIN_SRC emacs-lisp
       ; so that swiper functionality works with C-x C-f
       (use-package counsel
         :ensure t
         :bind  ;; for better kill ring functionality
         (("M-y" . counsel-yank-pop)
          :map ivy-minibuffer-map
          ("M-y" . ivy-next-line)))

       (use-package swiper
         :ensure try
         :bind (("C-s" . swiper)
                ("C-r" . swiper)
                ("C-c C-r" . ivy-resume)
                ("M-x" . counsel-M-x)
                ("C-x C-f" . counsel-find-file))
         :config
         (progn
           (ivy-mode 1)
           (setq ivy-use-virtual-buffers t)
           (setq ivy-display-style 'fancy)
           (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
           ))
     #+END_SRC

** avy
   - `M-s` to search for character on screen

   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+END_SRC

* Org-mode
** General
   - Adding a link `C-c C-l`
   - Move levels up and down `M-up`
   - `C-c C-x C-w/M-w` kill/copy subtree
   - `C-c C-w` Refile subtree
   - `#+STARTUP: showall` at beginning of `.org` document to avoid showing the collapsed view on startup
   - Run lisp functions `C-c C-c`
   - To open function in separate window `C-c '` (might have to do manual install of org using `package-install`)
   - Make a code block `<s` and `tab`

     #+BEGIN_SRC emacs-lisp
       (custom-set-variables
        '(org-directory "~/Dropbox/orgfiles")
        '(org-export-html-postamble nil)
        '(org-hide-leading-stars t)
        '(org-startup-folded (quote-overview))
        '(org-startup-indented t)
        )

       (setq org-file-apps
             (append '(
                       ("\\.pdf\\'" . "open")
                       ) org-file-apps))

       (global-set-key "\C-ca" 'org-agenda)

       (use-package org-ac
         :ensure t
         :init (progn
                 (require 'org-ac)
                 (org-ac/config-default)
                 ))

       (global-set-key (kbd "C-c c") 'org-capture)
       (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                                    "~/Dropbox/orgfiles/index.org"
                                    "~/Dropbox/orgfiles/schedule.org"))


     #+END_SRC
** Timer
   - Start timer `C-c C-x 0`
   - Get timestamp `C-c C-x .`
   - Pause timer `C-c C-x ,`
   - Stop timer `C-u C-c C-x ,`
** Tables
*** Get one 'column' from csv
    1) Convert to table `org-table-convert-region`
    2) Mark a rectangle beginning in desired col and ending after desired col at end of csv
    3) `kill-rectangle`
    4) `yank-rectangle`
    5) `string-rectangle` to insert text in every line of rectangle
** Org-capture 

Custom org-captures

#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "chromium-browser")

  (setq org-capture-templates
        '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do and Notes")
           "* TODO %?\n%u" :prepend t)
          ("m" "Mail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do and Notes")
           "* TODO %a\n %?" :prepend t)
          ("g" "GMail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do and Notes")
           "* TODO %^L\n %?" :prepend t)
          ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org" "Notes")
           "* %u %? " :prepend t)
          ))

#+END_SRC

* Elisp
  - Everything in parenthesis is a function: `(+ 2 3)` would mean *run the + function on 2 and 3* (run with `eval-last-sexp` or `C-x C-e`)
  - Set variable `(setq v 100)`. You could now `(+ v v)` and get the result with `C-x C-e` or `C-j`
  - `C-a` calls `(move-beginning-of-line nil)` and you could get the same effect runnig `C-x C-e` on this!
  - `C-p` is equiv to `(previous-line)` and `(previous-line 5)` would jump 5 lines up
** load a file of elisp commands
   Loads the file and runs it as if it were in the file that you load it from:
   (load-file "some-file.el")
* Flycheck
  You might have to manually install something like pylint

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC
* Python
  - get a console for the output `C-c C-p`
  - run code `C-c C-c`
** Fix bug 'Your ‘python-shell-interpreter’ doesn’t seem to support readline' 
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'python
   (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
   #+END_SRC
** Jedi
   Completion package for python

   # #+BEGIN_SRC emacs-lisp
   #   (use-package epc
   #     :ensure)
   #   (use-package jedi
   #     :ensure t
   #     :init
   #     (add-hook 'python-mode-hook 'jedi:setup)
   #     (add-hook 'python-mode-hook 'jedi:ac-setup))
   # #+END_SRC
** elpy
   - `C-c C-d` brings up documentation of functions, ...
   
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable))
   #+END_SRC
* Yasnippet
 - chunks of code that you can easily expand
 - you can put your own snippets in .emacs.d/snippets
   
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (yas-global-mode 1))
   #+END_SRC
* cpplint

  #+BEGIN_SRC emacs-lisp
    (use-package flymake-google-cpplint
      :ensure t
      :config
      (custom-set-variables '(flymake-google-cpplint-command "cpplint")))

    (use-package flymake-cursor
      :ensure t)

    (add-hook 'c-mode-hook 'flymake-google-cpplint)
    (add-hook 'c++-mode-hook 'flymake-google-cpplint-load)
  #+END_SRC
* gnuplot-mode
  #+BEGIN_SRC emacs-lisp
    (use-package gnuplot-mode
      :ensure t
      :config
      (setq auto-mode-alist (append '(("\\.gnuplot$" . gnuplot-mode)) auto-mode-alist)))
  #+END_SRC
* ledger-mode
  #+BEGIN_SRC emacs-lisp
    (use-package ledger-mode
      :ensure t
      :config
      (setq auto-mode-alist (append '(("\\.ledger$" . ledger-mode)) auto-mode-alist)))
  #+END_SRC
* macros
  - Start defining kbd macro with `C-x (` or `f3`
  - Stop defining kbd macro with `C-x )` or `f4`
  - Repeat macro with `C-x e` or `f4`
  - Name last macro `name-last-kbd-macro` (for current session only)
  - `insert-kbd-macro` returns macro definition at point (to save in .emacs)
  - Insert macro counter: Start macro with `f3`, then pressing `f3` gives you the counter. End definition with `f4`
* Undo
** built-in
   - `C -`
** Unto Tree
   - `C-x u` brings up the undo-tree
   - `d` shows the differences

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC
* hungry delete
  i.e. deletes all blank lines at once on `del`
  #+BEGIN_SRC emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))
  #+END_SRC
* expand-region
  - Press `C-b` to start
  - Press `b` to expand region, `-` to reduce it

  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-b") 'er/expand-region))
  #+END_SRC
* iedit
  - Go over a word you want to change in the entire buffer press `C-c;`, 
    edit the word (changes will appear in all occurences) and
    press the same kbd to end iedit mode.
  - if you want to do this only for a certain region, mark it and do `narrow-to-region`.
    edit what you want with iedit and end with `widen`
  
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
      :ensure
      :config
      (global-set-key (kbd "C-c ;") 'iedit-mode))
  #+END_SRC
* Misc
** auto-load files when changed on disc (important when using different computers)
   
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode 1)
   #+END_SRC
* tramp
** Modify files on remote servers:
- `C-x C-f`, delete everything to root, type 'ssh:<server address>:<file>'
- You can even open a shell/eshell on the remote machine

** root edit files
`C-x C-f`, delete everyithing to root and type `sudo::<file path>`

** Remote root edit files
`C-x C-f`, delete everything to root and type `ssh:<server address>|sudo:<server-address>:<file path>`

* shell and eshell
- Type `shell` or `eshell` to get a shell
- eshell let's you type also emacs commands!
- eshell let's you cd into a remote directory using `cd
  /ssh:<server-address>:` and with `cd #` you are back in your own
  home directoy. Of course you can also normally ssh into a remote
  directory but then you can't use emacs commands
- There is also the package better-shell to play with
  
#+BEGIN_SRC emacs-lisp
(defun eshell/clear ()
  "Clear the eshell buffer."
  (let ((inhibit-read-only t))
    (erase-buffer)))
#+END_SRC
    
* rectangle editing
- `C-x space` to mark a rectangle (if you mark rectangle like this,
  you can actually wank and yank normally)
- `C-x r k` to kill rectangle
- `C-x r y` to yank rectangle
- `C-x r o` to open rectangle (space in every line)
- Mark rectangle and do `string-insert-rectangle` or `string-rectangle`
  to add string to every line in redctangle/edit every line in
  rectangle
* c++
- `compile` to compile. Press `g` in compilation buffer to recompile
- `next-error` (if you have a makefile it also brings you to errors in
  cpp files that are not open currently)
- `C-c C-f` enters 'next error follow mode'
- g++ -MM main.cpp will tell you the dependencies
  
* ggtags and global
- [[https://astraybi.wordpress.com/2015/08/01/how-to-setup-gnu-global-for-emacs-mac/][Installation instructions]]
- `gtags -v` in directory to start using with this project
- `M-.` to jump to definition
- Try the functions (gtags-find-tag), (gtags-find-rtag), (gtags-find-symbol), and (gtags-pop-stack)
  
  #+BEGIN_SRC emacs-lisp
    (use-package ggtags  ;; you have to apt-get install global
      :ensure t
      :config
      (add-hook 'c-mode-common-hook
                (lambda ()
                  (when (derived-mode-p 'c-mode 'c++-mode)
                    (ggtags-mode 1))))
      )

    (setq load-path (cons "/opt/local/bin/global" load-path))
    (setq load-path (cons "/opt/local/bin/gtags" load-path))
    (setq load-path (cons "~/.emacs.d/gtags.el" load-path))
    (autoload 'gtags-mode "gtags" "" t)
  #+END_SRC
* dumb-jump
- If you want to enabale dumb-jump to find tags i.e. in Python
  libraries, add a .dumbjump file in the project repository containing
  the path, i.e.:
  +~/anaconda3/lib/python3.6/site-packages/torch/

#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :bind (("M-d g" . dumb-jump-go)
             ("M-d p" . dumb-jump-go-prompt)
             ("M-d b" . dumb-jump-back))
      :config (progn
                (setq dumb-jump-selector 'ivy)
                (setq dumb-jump-force-searcher 'ag)
                )
      :ensure)
#+END_SRC
